ATTENTES GLOBALES

avoir une bdd relationnel ou non relationnel
données temps réel
orchestrateur (airflow)
calcul distribué (pyspark)
faire des tests unitaires
CI/CD avec GitHub action (et tests unitaires)
système d'alerte avec prometheus flask


///////////////////////////////
ATTENTES DETAILLEES

C4.1.1
Besoin, enjeux, environnement, contraintes

C4.1.2
techno sélectionnés, avantages de ces technologies(cloud, performance, etc), point de vigilance, estimation des couts

C4.2.1
Architecture des données (créer une bdd avec type de données, comment elle est organisé, qui à accès)

C4.2.2
Présenter 3 méthode de traitement de données
-temps réel (SQL, python)
-orchestrateur (airflow)
-calcul distribués (Spark)

C4.2.3
Faire une CI/CD (github action permet de rester sur github, faire tourner test unitaire et validé commit)
(pour cela, je dois créer des tests unitaires)

C4.3.1
Mettre en place un système de supervision et d'alerte
Ajouter prometheus a flask, apparement simple

C4.3.2
faire un petit doc qui explique les date de renouvellement de certificat, echeance de mise a jour, date de maintenance, point de vigilance

C4.3.3
Utiliser la doc ETL en expliquant pour qui elle est destiné, ce qu'elle présente

C4.4.1
cahier expliquant les tests, ce qui est attendu, définir si il s agit de test fonctionnel/structurel/sécurité

C4.4.2
Expliquer en détail un incident technique et sa résolution avec
nature du problème/ action a mettre en œuvres suivant chaque scenario/ communication pour chaque acteurs/ résultats attendu

